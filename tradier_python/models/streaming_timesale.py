# coding: utf-8

"""
    Tradier API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tradier_python.configuration import Configuration


class StreamingTimesale(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'symbol': 'str',
        'exch': 'str',
        'bid': 'BigDecimal',
        'ask': 'BigDecimal',
        'last': 'BigDecimal',
        'size': 'BigDecimal',
        'date': 'str',
        'seq': 'float',
        'flag': 'str',
        'cancel': 'bool',
        'correction': 'bool',
        'session': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'exch': 'exch',
        'bid': 'bid',
        'ask': 'ask',
        'last': 'last',
        'size': 'size',
        'date': 'date',
        'seq': 'seq',
        'flag': 'flag',
        'cancel': 'cancel',
        'correction': 'correction',
        'session': 'session'
    }

    def __init__(self, symbol=None, exch=None, bid=None, ask=None, last=None, size=None, date=None, seq=None, flag=None, cancel=None, correction=None, session=None, local_vars_configuration=None):  # noqa: E501
        """StreamingTimesale - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._symbol = None
        self._exch = None
        self._bid = None
        self._ask = None
        self._last = None
        self._size = None
        self._date = None
        self._seq = None
        self._flag = None
        self._cancel = None
        self._correction = None
        self._session = None
        self.discriminator = None

        if symbol is not None:
            self.symbol = symbol
        if exch is not None:
            self.exch = exch
        if bid is not None:
            self.bid = bid
        if ask is not None:
            self.ask = ask
        if last is not None:
            self.last = last
        if size is not None:
            self.size = size
        if date is not None:
            self.date = date
        if seq is not None:
            self.seq = seq
        if flag is not None:
            self.flag = flag
        if cancel is not None:
            self.cancel = cancel
        if correction is not None:
            self.correction = correction
        if session is not None:
            self.session = session

    @property
    def symbol(self):
        """Gets the symbol of this StreamingTimesale.  # noqa: E501


        :return: The symbol of this StreamingTimesale.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this StreamingTimesale.


        :param symbol: The symbol of this StreamingTimesale.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def exch(self):
        """Gets the exch of this StreamingTimesale.  # noqa: E501


        :return: The exch of this StreamingTimesale.  # noqa: E501
        :rtype: str
        """
        return self._exch

    @exch.setter
    def exch(self, exch):
        """Sets the exch of this StreamingTimesale.


        :param exch: The exch of this StreamingTimesale.  # noqa: E501
        :type: str
        """

        self._exch = exch

    @property
    def bid(self):
        """Gets the bid of this StreamingTimesale.  # noqa: E501


        :return: The bid of this StreamingTimesale.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this StreamingTimesale.


        :param bid: The bid of this StreamingTimesale.  # noqa: E501
        :type: BigDecimal
        """

        self._bid = bid

    @property
    def ask(self):
        """Gets the ask of this StreamingTimesale.  # noqa: E501


        :return: The ask of this StreamingTimesale.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._ask

    @ask.setter
    def ask(self, ask):
        """Sets the ask of this StreamingTimesale.


        :param ask: The ask of this StreamingTimesale.  # noqa: E501
        :type: BigDecimal
        """

        self._ask = ask

    @property
    def last(self):
        """Gets the last of this StreamingTimesale.  # noqa: E501


        :return: The last of this StreamingTimesale.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this StreamingTimesale.


        :param last: The last of this StreamingTimesale.  # noqa: E501
        :type: BigDecimal
        """

        self._last = last

    @property
    def size(self):
        """Gets the size of this StreamingTimesale.  # noqa: E501


        :return: The size of this StreamingTimesale.  # noqa: E501
        :rtype: BigDecimal
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this StreamingTimesale.


        :param size: The size of this StreamingTimesale.  # noqa: E501
        :type: BigDecimal
        """

        self._size = size

    @property
    def date(self):
        """Gets the date of this StreamingTimesale.  # noqa: E501


        :return: The date of this StreamingTimesale.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this StreamingTimesale.


        :param date: The date of this StreamingTimesale.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                date is not None and not re.search(r'^[0-9]+$', date)):  # noqa: E501
            raise ValueError(r"Invalid value for `date`, must be a follow pattern or equal to `/^[0-9]+$/`")  # noqa: E501

        self._date = date

    @property
    def seq(self):
        """Gets the seq of this StreamingTimesale.  # noqa: E501


        :return: The seq of this StreamingTimesale.  # noqa: E501
        :rtype: float
        """
        return self._seq

    @seq.setter
    def seq(self, seq):
        """Sets the seq of this StreamingTimesale.


        :param seq: The seq of this StreamingTimesale.  # noqa: E501
        :type: float
        """

        self._seq = seq

    @property
    def flag(self):
        """Gets the flag of this StreamingTimesale.  # noqa: E501


        :return: The flag of this StreamingTimesale.  # noqa: E501
        :rtype: str
        """
        return self._flag

    @flag.setter
    def flag(self, flag):
        """Sets the flag of this StreamingTimesale.


        :param flag: The flag of this StreamingTimesale.  # noqa: E501
        :type: str
        """

        self._flag = flag

    @property
    def cancel(self):
        """Gets the cancel of this StreamingTimesale.  # noqa: E501


        :return: The cancel of this StreamingTimesale.  # noqa: E501
        :rtype: bool
        """
        return self._cancel

    @cancel.setter
    def cancel(self, cancel):
        """Sets the cancel of this StreamingTimesale.


        :param cancel: The cancel of this StreamingTimesale.  # noqa: E501
        :type: bool
        """

        self._cancel = cancel

    @property
    def correction(self):
        """Gets the correction of this StreamingTimesale.  # noqa: E501


        :return: The correction of this StreamingTimesale.  # noqa: E501
        :rtype: bool
        """
        return self._correction

    @correction.setter
    def correction(self, correction):
        """Sets the correction of this StreamingTimesale.


        :param correction: The correction of this StreamingTimesale.  # noqa: E501
        :type: bool
        """

        self._correction = correction

    @property
    def session(self):
        """Gets the session of this StreamingTimesale.  # noqa: E501


        :return: The session of this StreamingTimesale.  # noqa: E501
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this StreamingTimesale.


        :param session: The session of this StreamingTimesale.  # noqa: E501
        :type: str
        """

        self._session = session

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StreamingTimesale):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StreamingTimesale):
            return True

        return self.to_dict() != other.to_dict()
