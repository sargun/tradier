# coding: utf-8

"""
    Tradier API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tradier_asyncio.configuration import Configuration


class OptionGreeks(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'delta': 'float',
        'gamma': 'float',
        'thetha': 'float',
        'vega': 'float',
        'rho': 'float',
        'phi': 'float',
        'bid_iv': 'float',
        'mid_iv': 'float',
        'ask_iv': 'float',
        'smv_vol': 'float',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'delta': 'delta',
        'gamma': 'gamma',
        'thetha': 'thetha',
        'vega': 'vega',
        'rho': 'rho',
        'phi': 'phi',
        'bid_iv': 'bid_iv',
        'mid_iv': 'mid_iv',
        'ask_iv': 'ask_iv',
        'smv_vol': 'smv_vol',
        'updated_at': 'updated_at'
    }

    def __init__(self, delta=None, gamma=None, thetha=None, vega=None, rho=None, phi=None, bid_iv=None, mid_iv=None, ask_iv=None, smv_vol=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """OptionGreeks - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._delta = None
        self._gamma = None
        self._thetha = None
        self._vega = None
        self._rho = None
        self._phi = None
        self._bid_iv = None
        self._mid_iv = None
        self._ask_iv = None
        self._smv_vol = None
        self._updated_at = None
        self.discriminator = None

        if delta is not None:
            self.delta = delta
        if gamma is not None:
            self.gamma = gamma
        if thetha is not None:
            self.thetha = thetha
        if vega is not None:
            self.vega = vega
        if rho is not None:
            self.rho = rho
        if phi is not None:
            self.phi = phi
        if bid_iv is not None:
            self.bid_iv = bid_iv
        if mid_iv is not None:
            self.mid_iv = mid_iv
        if ask_iv is not None:
            self.ask_iv = ask_iv
        if smv_vol is not None:
            self.smv_vol = smv_vol
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def delta(self):
        """Gets the delta of this OptionGreeks.  # noqa: E501

        Delta (Δ) represents the rate of change between the option's price and a $1 change in the underlying asset's price.  # noqa: E501

        :return: The delta of this OptionGreeks.  # noqa: E501
        :rtype: float
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this OptionGreeks.

        Delta (Δ) represents the rate of change between the option's price and a $1 change in the underlying asset's price.  # noqa: E501

        :param delta: The delta of this OptionGreeks.  # noqa: E501
        :type: float
        """

        self._delta = delta

    @property
    def gamma(self):
        """Gets the gamma of this OptionGreeks.  # noqa: E501

        Gamma (Γ) represents the rate of change between an option's delta and the underlying asset's price.  # noqa: E501

        :return: The gamma of this OptionGreeks.  # noqa: E501
        :rtype: float
        """
        return self._gamma

    @gamma.setter
    def gamma(self, gamma):
        """Sets the gamma of this OptionGreeks.

        Gamma (Γ) represents the rate of change between an option's delta and the underlying asset's price.  # noqa: E501

        :param gamma: The gamma of this OptionGreeks.  # noqa: E501
        :type: float
        """

        self._gamma = gamma

    @property
    def thetha(self):
        """Gets the thetha of this OptionGreeks.  # noqa: E501

        Theta (Θ) represents the rate of change between the option price and time, or time sensitivity - sometimes known as an option's time decay.  # noqa: E501

        :return: The thetha of this OptionGreeks.  # noqa: E501
        :rtype: float
        """
        return self._thetha

    @thetha.setter
    def thetha(self, thetha):
        """Sets the thetha of this OptionGreeks.

        Theta (Θ) represents the rate of change between the option price and time, or time sensitivity - sometimes known as an option's time decay.  # noqa: E501

        :param thetha: The thetha of this OptionGreeks.  # noqa: E501
        :type: float
        """

        self._thetha = thetha

    @property
    def vega(self):
        """Gets the vega of this OptionGreeks.  # noqa: E501

        Vega (v) represents the rate of change between an option's value and the underlying asset's implied volatility.  # noqa: E501

        :return: The vega of this OptionGreeks.  # noqa: E501
        :rtype: float
        """
        return self._vega

    @vega.setter
    def vega(self, vega):
        """Sets the vega of this OptionGreeks.

        Vega (v) represents the rate of change between an option's value and the underlying asset's implied volatility.  # noqa: E501

        :param vega: The vega of this OptionGreeks.  # noqa: E501
        :type: float
        """

        self._vega = vega

    @property
    def rho(self):
        """Gets the rho of this OptionGreeks.  # noqa: E501

        Rho (p) represents the rate of change between an option's value and a 1% change in the interest rate.  # noqa: E501

        :return: The rho of this OptionGreeks.  # noqa: E501
        :rtype: float
        """
        return self._rho

    @rho.setter
    def rho(self, rho):
        """Sets the rho of this OptionGreeks.

        Rho (p) represents the rate of change between an option's value and a 1% change in the interest rate.  # noqa: E501

        :param rho: The rho of this OptionGreeks.  # noqa: E501
        :type: float
        """

        self._rho = rho

    @property
    def phi(self):
        """Gets the phi of this OptionGreeks.  # noqa: E501

        Phi indicates the expected change in the option premium due to a small change in the foreign currency interest rate.  # noqa: E501

        :return: The phi of this OptionGreeks.  # noqa: E501
        :rtype: float
        """
        return self._phi

    @phi.setter
    def phi(self, phi):
        """Sets the phi of this OptionGreeks.

        Phi indicates the expected change in the option premium due to a small change in the foreign currency interest rate.  # noqa: E501

        :param phi: The phi of this OptionGreeks.  # noqa: E501
        :type: float
        """

        self._phi = phi

    @property
    def bid_iv(self):
        """Gets the bid_iv of this OptionGreeks.  # noqa: E501

        Bid implied volatility  # noqa: E501

        :return: The bid_iv of this OptionGreeks.  # noqa: E501
        :rtype: float
        """
        return self._bid_iv

    @bid_iv.setter
    def bid_iv(self, bid_iv):
        """Sets the bid_iv of this OptionGreeks.

        Bid implied volatility  # noqa: E501

        :param bid_iv: The bid_iv of this OptionGreeks.  # noqa: E501
        :type: float
        """

        self._bid_iv = bid_iv

    @property
    def mid_iv(self):
        """Gets the mid_iv of this OptionGreeks.  # noqa: E501

        Mid implied volatility  # noqa: E501

        :return: The mid_iv of this OptionGreeks.  # noqa: E501
        :rtype: float
        """
        return self._mid_iv

    @mid_iv.setter
    def mid_iv(self, mid_iv):
        """Sets the mid_iv of this OptionGreeks.

        Mid implied volatility  # noqa: E501

        :param mid_iv: The mid_iv of this OptionGreeks.  # noqa: E501
        :type: float
        """

        self._mid_iv = mid_iv

    @property
    def ask_iv(self):
        """Gets the ask_iv of this OptionGreeks.  # noqa: E501

        Ask implied volatility  # noqa: E501

        :return: The ask_iv of this OptionGreeks.  # noqa: E501
        :rtype: float
        """
        return self._ask_iv

    @ask_iv.setter
    def ask_iv(self, ask_iv):
        """Sets the ask_iv of this OptionGreeks.

        Ask implied volatility  # noqa: E501

        :param ask_iv: The ask_iv of this OptionGreeks.  # noqa: E501
        :type: float
        """

        self._ask_iv = ask_iv

    @property
    def smv_vol(self):
        """Gets the smv_vol of this OptionGreeks.  # noqa: E501

        ORATS final implied volatility  # noqa: E501

        :return: The smv_vol of this OptionGreeks.  # noqa: E501
        :rtype: float
        """
        return self._smv_vol

    @smv_vol.setter
    def smv_vol(self, smv_vol):
        """Sets the smv_vol of this OptionGreeks.

        ORATS final implied volatility  # noqa: E501

        :param smv_vol: The smv_vol of this OptionGreeks.  # noqa: E501
        :type: float
        """

        self._smv_vol = smv_vol

    @property
    def updated_at(self):
        """Gets the updated_at of this OptionGreeks.  # noqa: E501


        :return: The updated_at of this OptionGreeks.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this OptionGreeks.


        :param updated_at: The updated_at of this OptionGreeks.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptionGreeks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OptionGreeks):
            return True

        return self.to_dict() != other.to_dict()
