# coding: utf-8

"""
    Tradier API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tradier.configuration import Configuration


class StreamingTrade(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cvol': 'str',
        'date': 'str',
        'last': 'str',
        'price': 'str',
        'size': 'str',
        'symbol': 'str',
        'exch': 'str',
        'type': 'str'
    }

    attribute_map = {
        'cvol': 'cvol',
        'date': 'date',
        'last': 'last',
        'price': 'price',
        'size': 'size',
        'symbol': 'symbol',
        'exch': 'exch',
        'type': 'type'
    }

    def __init__(self, cvol=None, date=None, last=None, price=None, size=None, symbol=None, exch=None, type=None, local_vars_configuration=None):  # noqa: E501
        """StreamingTrade - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cvol = None
        self._date = None
        self._last = None
        self._price = None
        self._size = None
        self._symbol = None
        self._exch = None
        self._type = None
        self.discriminator = None

        if cvol is not None:
            self.cvol = cvol
        if date is not None:
            self.date = date
        if last is not None:
            self.last = last
        if price is not None:
            self.price = price
        if size is not None:
            self.size = size
        if symbol is not None:
            self.symbol = symbol
        if exch is not None:
            self.exch = exch
        if type is not None:
            self.type = type

    @property
    def cvol(self):
        """Gets the cvol of this StreamingTrade.  # noqa: E501


        :return: The cvol of this StreamingTrade.  # noqa: E501
        :rtype: str
        """
        return self._cvol

    @cvol.setter
    def cvol(self, cvol):
        """Sets the cvol of this StreamingTrade.


        :param cvol: The cvol of this StreamingTrade.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                cvol is not None and not re.search(r'^[0-9]+$', cvol)):  # noqa: E501
            raise ValueError(r"Invalid value for `cvol`, must be a follow pattern or equal to `/^[0-9]+$/`")  # noqa: E501

        self._cvol = cvol

    @property
    def date(self):
        """Gets the date of this StreamingTrade.  # noqa: E501


        :return: The date of this StreamingTrade.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this StreamingTrade.


        :param date: The date of this StreamingTrade.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                date is not None and not re.search(r'^[0-9]+$', date)):  # noqa: E501
            raise ValueError(r"Invalid value for `date`, must be a follow pattern or equal to `/^[0-9]+$/`")  # noqa: E501

        self._date = date

    @property
    def last(self):
        """Gets the last of this StreamingTrade.  # noqa: E501


        :return: The last of this StreamingTrade.  # noqa: E501
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this StreamingTrade.


        :param last: The last of this StreamingTrade.  # noqa: E501
        :type: str
        """

        self._last = last

    @property
    def price(self):
        """Gets the price of this StreamingTrade.  # noqa: E501


        :return: The price of this StreamingTrade.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this StreamingTrade.


        :param price: The price of this StreamingTrade.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def size(self):
        """Gets the size of this StreamingTrade.  # noqa: E501


        :return: The size of this StreamingTrade.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this StreamingTrade.


        :param size: The size of this StreamingTrade.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def symbol(self):
        """Gets the symbol of this StreamingTrade.  # noqa: E501


        :return: The symbol of this StreamingTrade.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this StreamingTrade.


        :param symbol: The symbol of this StreamingTrade.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def exch(self):
        """Gets the exch of this StreamingTrade.  # noqa: E501


        :return: The exch of this StreamingTrade.  # noqa: E501
        :rtype: str
        """
        return self._exch

    @exch.setter
    def exch(self, exch):
        """Sets the exch of this StreamingTrade.


        :param exch: The exch of this StreamingTrade.  # noqa: E501
        :type: str
        """

        self._exch = exch

    @property
    def type(self):
        """Gets the type of this StreamingTrade.  # noqa: E501


        :return: The type of this StreamingTrade.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StreamingTrade.


        :param type: The type of this StreamingTrade.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StreamingTrade):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StreamingTrade):
            return True

        return self.to_dict() != other.to_dict()
